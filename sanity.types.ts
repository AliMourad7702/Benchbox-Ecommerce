/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Quote = {
  _id: string;
  _type: "quote";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  isGuest?: boolean;
  name?: string;
  email?: string;
  phone?: string;
  address?: {
    line1?: string;
    line2?: string;
    city?: string;
    postalCode?: string;
    country?: string;
  };
  notes?: string;
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    variant?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "variant";
    };
    quantity?: number;
    itemTotal?: number;
    productId?: string;
    productName?: string;
    productSlug?: string;
    baseSku?: string;
    variantLabel?: string;
    variantSku?: string;
    color?: {
      colorName?: string;
      colorCode?: string;
      images?: Array<string>;
      variantPrice?: number;
      stock?: number;
      specs?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
    };
    _type: "item";
    _key: string;
  }>;
  totalPrice?: number;
  status?: "received" | "under reviewing" | "accepted" | "declined";
  createdAt?: string;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  email?: string;
  name?: string;
  role?: "user" | "admin" | "manager";
  joinedAt?: string;
};

export type Variant = {
  _id: string;
  _type: "variant";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  sku?: string;
  colorOptions?: Array<{
    colorName?: string;
    color?: Color;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    price?: number;
    stock?: number;
    specs?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _type: "colorImagePair";
    _key: string;
  }>;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  baseSku?: string;
  slug?: Slug;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  variants?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "variant";
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  featured?: boolean;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Quote | User | Variant | Product | Category | BlockContent | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/categories/getAllCategories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[_type == "category"]{    _id,    title,    "imageUrl": image.asset->url,    description,    "slug": slug.current  }
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  imageUrl: string | null;
  description: string | null;
  slug: string | null;
}>;

// Source: ./sanity/lib/categories/getFeaturedCategories.ts
// Variable: FEATURED_CATEGORIES_QUERY
// Query: *[_type == "category" && featured == true]{      _id,      title,      "imageUrl": image.asset->url,      description,      "slug": slug.current    }
export type FEATURED_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  imageUrl: string | null;
  description: string | null;
  slug: string | null;
}>;

// Source: ./sanity/lib/products/getAllProducts.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == "product"] | order(_updatedAt desc) {    _id,    name,    baseSku,    "slug": slug.current,    category->{      title,      "slug": slug.current    },    variants[]->{      _id,      label,      sku,      colorOptions[]{          colorName,          "colorCode": color.hex,          "images":images[].asset->url,          price,          stock,          specs,        }    }  }
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  baseSku: string | null;
  slug: string | null;
  category: {
    title: string | null;
    slug: string | null;
  } | null;
  variants: Array<{
    _id: string;
    label: string | null;
    sku: string | null;
    colorOptions: Array<{
      colorName: string | null;
      colorCode: string | null;
      images: Array<string | null> | null;
      price: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/getProductBySlug.ts
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == "product" && slug.current==$slug][0]{    _id,    name,    baseSku,    "slug": slug.current,    category->{      title,      "slug": slug.current    },    variants[]->{      _id,      label,      sku,      colorOptions[]{          colorName,          "colorCode": color.hex,          "images":images[].asset->url,          price,          stock,          specs,        }    }  }
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  name: string | null;
  baseSku: string | null;
  slug: string | null;
  category: {
    title: string | null;
    slug: string | null;
  } | null;
  variants: Array<{
    _id: string;
    label: string | null;
    sku: string | null;
    colorOptions: Array<{
      colorName: string | null;
      colorCode: string | null;
      images: Array<string | null> | null;
      price: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
} | null;

// Source: ./sanity/lib/products/getProductsByCategory.ts
// Variable: PRODUCTS_BY_CATEGORY_QUERY
// Query: *[_type == "product" && category->slug.current == $categorySlug] | order(_createdAt desc)[0...4]{      _id,      name,      baseSku,      "slug": slug.current,      category->{        title,        "slug": slug.current      },      variants[]->{        _id,        label,        sku,        colorOptions[] {          colorName,          "colorCode": color.hex,          "images": images[].asset->url,          price,          stock,          specs,        }      }    }
export type PRODUCTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string | null;
  baseSku: string | null;
  slug: string | null;
  category: {
    title: string | null;
    slug: string | null;
  } | null;
  variants: Array<{
    _id: string;
    label: string | null;
    sku: string | null;
    colorOptions: Array<{
      colorName: string | null;
      colorCode: string | null;
      images: Array<string | null> | null;
      price: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/getProductsByCategoryPaginated.ts
// Variable: PRODUCTS_BY_CATEGORY_QUERY_PAGINATED
// Query: {    "items": *[_type == "product" && category->slug.current == $categorySlug]      | order(_createdAt desc)[$offset...$limit] {        _id,        name,        baseSku,        "slug": slug.current,        category->{          title,          "slug": slug.current        },        variants[]->{          _id,          label,          sku,          colorOptions[] {            colorName,            "colorCode": color.hex,            "images": images[].asset->url,            price,            stock,            specs,          }        }    },    "total": count(*[_type == "product" && category->slug.current == $categorySlug])  }
export type PRODUCTS_BY_CATEGORY_QUERY_PAGINATEDResult = {
  items: Array<{
    _id: string;
    name: string | null;
    baseSku: string | null;
    slug: string | null;
    category: {
      title: string | null;
      slug: string | null;
    } | null;
    variants: Array<{
      _id: string;
      label: string | null;
      sku: string | null;
      colorOptions: Array<{
        colorName: string | null;
        colorCode: string | null;
        images: Array<string | null> | null;
        price: number | null;
        stock: number | null;
        specs: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
      }> | null;
    }> | null;
  }>;
  total: number;
};

// Source: ./sanity/lib/products/getRelatedProductsByFilter.ts
// Variable: RELATED_PRODUCTS_QUERY
// Query: *[      _type == "product" &&      baseSku != $baseSku &&      (        $filterOption == "category" && category->slug.current==$categorySlug ||        $filterOption == "color" &&        count(variants[]->colorOptions[colorName==$colorName])>0      )     ][0...4]{      _id,      name,      baseSku,      "slug": slug.current,      category->{        title,        "slug": slug.current      },      variants[]->{        _id,        label,        sku,        "colorOptions": select(        $filterOption == "color" => colorOptions[colorName == $colorName],        true => colorOptions      )[]{          colorName,          "colorCode": color.hex,          "images": images[].asset->url,          price,          stock,          specs,        }      }    }
export type RELATED_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  baseSku: string | null;
  slug: string | null;
  category: {
    title: string | null;
    slug: string | null;
  } | null;
  variants: Array<{
    _id: string;
    label: string | null;
    sku: string | null;
    colorOptions: Array<{
      colorName: string | null;
      colorCode: string | null;
      images: Array<string | null> | null;
      price: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/searchProducts.ts
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[_type == "product" && (        name match $searchParams ||        baseSku match $searchParams ||        category->title match $searchParams ||        count(variants[]->colorOptions[specs[].children[].text match $searchParams])>0      )     ] | order(_updatedAt desc) {        _id,        name,        baseSku,        "slug": slug.current,        category->{          title,          "slug": slug.current        },        variants[]->{          _id,          label,          sku,          colorOptions[]{              colorName,              "colorCode": color.hex,              "images":images[].asset->url,              price,              stock,              specs,          }        }      }
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  name: string | null;
  baseSku: string | null;
  slug: string | null;
  category: {
    title: string | null;
    slug: string | null;
  } | null;
  variants: Array<{
    _id: string;
    label: string | null;
    sku: string | null;
    colorOptions: Array<{
      colorName: string | null;
      colorCode: string | null;
      images: Array<string | null> | null;
      price: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    }> | null;
  }> | null;
}>;

// Source: ./sanity/lib/products/searchProductsPaginated.ts
// Variable: PRODUCT_SEARCH_QUERY_PAGINATED
// Query: {    "products": *[      _type == "product" && (        name match $searchParams ||        baseSku match $searchParams ||        category->title match $searchParams ||        count(variants[]->colorOptions[specs[].children[].text match $searchParams]) > 0      )    ] | order(_updatedAt desc)[$offset...$limit] {      _id,      name,      baseSku,      "slug": slug.current,      category->{        title,        "slug": slug.current      },      variants[]->{        _id,        label,        sku,        colorOptions[] {          colorName,          "colorCode": color.hex,          "images": images[].asset->url,          price,          stock,          specs,        }      }    },    "total": count(*[      _type == "product" && (        name match $searchParams ||        baseSku match $searchParams ||        category->title match $searchParams ||        count(variants[]->colorOptions[specs[].children[].text match $searchParams]) > 0      )    ])  }
export type PRODUCT_SEARCH_QUERY_PAGINATEDResult = {
  products: Array<{
    _id: string;
    name: string | null;
    baseSku: string | null;
    slug: string | null;
    category: {
      title: string | null;
      slug: string | null;
    } | null;
    variants: Array<{
      _id: string;
      label: string | null;
      sku: string | null;
      colorOptions: Array<{
        colorName: string | null;
        colorCode: string | null;
        images: Array<string | null> | null;
        price: number | null;
        stock: number | null;
        specs: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
      }> | null;
    }> | null;
  }>;
  total: number;
};

// Source: ./sanity/lib/quotations/getQuotationById.ts
// Variable: GET_QUOTATION_BY_ID
// Query: *[_type == "quote" && _id == $quoteId][0]{      _id,       name,       email,      phone,      address,      notes,       totalPrice,      status,      createdAt,       "user": user->_id,      items[]{          quantity,          itemTotal,          productId,          productName,          productSlug,          baseSku,          variantLabel,          variantSku,          "category": product->category->{title, slug},          "variantId": variant->_id,          color{            colorName,            colorCode,            "firstImage": images[0],            variantPrice,            stock,            specs          }      }    }
export type GET_QUOTATION_BY_IDResult = {
  _id: string;
  name: string | null;
  email: string | null;
  phone: string | null;
  address: {
    line1?: string;
    line2?: string;
    city?: string;
    postalCode?: string;
    country?: string;
  } | null;
  notes: string | null;
  totalPrice: number | null;
  status: "accepted" | "declined" | "received" | "under reviewing" | null;
  createdAt: string | null;
  user: string | null;
  items: Array<{
    quantity: number | null;
    itemTotal: number | null;
    productId: string | null;
    productName: string | null;
    productSlug: string | null;
    baseSku: string | null;
    variantLabel: string | null;
    variantSku: string | null;
    category: {
      title: string | null;
      slug: Slug | null;
    } | null;
    variantId: string | null;
    color: {
      colorName: string | null;
      colorCode: string | null;
      firstImage: string | null;
      variantPrice: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    } | null;
  }> | null;
} | null;

// Source: ./sanity/lib/quotations/getQuotationsByClerkId.ts
// Variable: GET_QUOTATIONS_BY_CLERK_ID
// Query: *[_type=="quote" && user->clerkId == $clerkId] | order(_createdAt desc){    _id,     name,     email,    phone,    address,    notes,     totalPrice,    status,    createdAt,     "user": user->_id,    items[]{        quantity,        itemTotal,        productId,        productName,        productSlug,        baseSku,        variantLabel,        variantSku,        "category": product->category->{title, slug},        "variantId": variant->_id,        color{          colorName,          colorCode,          "firstImage": images[0],          variantPrice,          stock,          specs        }      }  }
export type GET_QUOTATIONS_BY_CLERK_IDResult = Array<{
  _id: string;
  name: string | null;
  email: string | null;
  phone: string | null;
  address: {
    line1?: string;
    line2?: string;
    city?: string;
    postalCode?: string;
    country?: string;
  } | null;
  notes: string | null;
  totalPrice: number | null;
  status: "accepted" | "declined" | "received" | "under reviewing" | null;
  createdAt: string | null;
  user: string | null;
  items: Array<{
    quantity: number | null;
    itemTotal: number | null;
    productId: string | null;
    productName: string | null;
    productSlug: string | null;
    baseSku: string | null;
    variantLabel: string | null;
    variantSku: string | null;
    category: {
      title: string | null;
      slug: Slug | null;
    } | null;
    variantId: string | null;
    color: {
      colorName: string | null;
      colorCode: string | null;
      firstImage: string | null;
      variantPrice: number | null;
      stock: number | null;
      specs: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    } | null;
  }> | null;
}>;

// Source: ./sanity/lib/users/getSanityUserIdByClerkId.ts
// Variable: GET_SANITY_USER_BY_CLERK_ID
// Query: *[_type == "user" && clerkId == $clerkId][0]{_id}
export type GET_SANITY_USER_BY_CLERK_IDResult = {
  _id: string;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"category\"]{\n    _id,\n    title,\n    \"imageUrl\": image.asset->url,\n    description,\n    \"slug\": slug.current\n  }\n    ": ALL_CATEGORIES_QUERYResult;
    "\n    *[_type == \"category\" && featured == true]{\n      _id,\n      title,\n      \"imageUrl\": image.asset->url,\n      description,\n      \"slug\": slug.current\n    }\n  ": FEATURED_CATEGORIES_QUERYResult;
    "\n    *[_type == \"product\"] | order(_updatedAt desc) {\n    _id,\n    name,\n    baseSku,\n    \"slug\": slug.current,\n    category->{\n      title,\n      \"slug\": slug.current\n    },\n    variants[]->{\n      _id,\n      label,\n      sku,\n      colorOptions[]{\n          colorName,\n          \"colorCode\": color.hex,\n          \"images\":images[].asset->url,\n          price,\n          stock,\n          specs,\n        }\n    }\n  }\n    ": ALL_PRODUCTS_QUERYResult;
    "\n    *[_type == \"product\" && slug.current==$slug][0]{\n    _id,\n    name,\n    baseSku,\n    \"slug\": slug.current,\n    category->{\n      title,\n      \"slug\": slug.current\n    },\n    variants[]->{\n      _id,\n      label,\n      sku,\n      colorOptions[]{\n          colorName,\n          \"colorCode\": color.hex,\n          \"images\":images[].asset->url,\n          price,\n          stock,\n          specs,\n        }\n    }\n  }\n    ": PRODUCT_BY_SLUG_QUERYResult;
    "\n    *[_type == \"product\" && category->slug.current == $categorySlug] | order(_createdAt desc)[0...4]{\n      _id,\n      name,\n      baseSku,\n      \"slug\": slug.current,\n      category->{\n        title,\n        \"slug\": slug.current\n      },\n      variants[]->{\n        _id,\n        label,\n        sku,\n        colorOptions[] {\n          colorName,\n          \"colorCode\": color.hex,\n          \"images\": images[].asset->url,\n          price,\n          stock,\n          specs,\n        }\n      }\n    }\n    ": PRODUCTS_BY_CATEGORY_QUERYResult;
    "\n  {\n    \"items\": *[_type == \"product\" && category->slug.current == $categorySlug]\n      | order(_createdAt desc)[$offset...$limit] {\n        _id,\n        name,\n        baseSku,\n        \"slug\": slug.current,\n        category->{\n          title,\n          \"slug\": slug.current\n        },\n        variants[]->{\n          _id,\n          label,\n          sku,\n          colorOptions[] {\n            colorName,\n            \"colorCode\": color.hex,\n            \"images\": images[].asset->url,\n            price,\n            stock,\n            specs,\n          }\n        }\n    },\n    \"total\": count(*[_type == \"product\" && category->slug.current == $categorySlug])\n  }\n": PRODUCTS_BY_CATEGORY_QUERY_PAGINATEDResult;
    "\n    *[\n      _type == \"product\" &&\n      baseSku != $baseSku &&\n      (\n        $filterOption == \"category\" && category->slug.current==$categorySlug ||\n        $filterOption == \"color\" &&\n        count(variants[]->colorOptions[colorName==$colorName])>0\n      ) \n    ][0...4]{\n      _id,\n      name,\n      baseSku,\n      \"slug\": slug.current,\n      category->{\n        title,\n        \"slug\": slug.current\n      },\n      variants[]->{\n        _id,\n        label,\n        sku,\n        \"colorOptions\": select(\n        $filterOption == \"color\" => colorOptions[colorName == $colorName],\n        true => colorOptions\n      )[]{\n          colorName,\n          \"colorCode\": color.hex,\n          \"images\": images[].asset->url,\n          price,\n          stock,\n          specs,\n        }\n      }\n    }\n    ": RELATED_PRODUCTS_QUERYResult;
    "\n    *[_type == \"product\" && (\n        name match $searchParams ||\n        baseSku match $searchParams ||\n        category->title match $searchParams ||\n        count(variants[]->colorOptions[specs[].children[].text match $searchParams])>0\n      ) \n    ] | order(_updatedAt desc) {\n        _id,\n        name,\n        baseSku,\n        \"slug\": slug.current,\n        category->{\n          title,\n          \"slug\": slug.current\n        },\n        variants[]->{\n          _id,\n          label,\n          sku,\n          colorOptions[]{\n              colorName,\n              \"colorCode\": color.hex,\n              \"images\":images[].asset->url,\n              price,\n              stock,\n              specs,\n          }\n        }\n      }\n  ": PRODUCT_SEARCH_QUERYResult;
    "\n  {\n    \"products\": *[\n      _type == \"product\" && (\n        name match $searchParams ||\n        baseSku match $searchParams ||\n        category->title match $searchParams ||\n        count(variants[]->colorOptions[specs[].children[].text match $searchParams]) > 0\n      )\n    ] | order(_updatedAt desc)[$offset...$limit] {\n      _id,\n      name,\n      baseSku,\n      \"slug\": slug.current,\n      category->{\n        title,\n        \"slug\": slug.current\n      },\n      variants[]->{\n        _id,\n        label,\n        sku,\n        colorOptions[] {\n          colorName,\n          \"colorCode\": color.hex,\n          \"images\": images[].asset->url,\n          price,\n          stock,\n          specs,\n        }\n      }\n    },\n    \"total\": count(*[\n      _type == \"product\" && (\n        name match $searchParams ||\n        baseSku match $searchParams ||\n        category->title match $searchParams ||\n        count(variants[]->colorOptions[specs[].children[].text match $searchParams]) > 0\n      )\n    ])\n  }\n  ": PRODUCT_SEARCH_QUERY_PAGINATEDResult;
    "\n    *[_type == \"quote\" && _id == $quoteId][0]{\n      _id, \n      name, \n      email,\n      phone,\n      address,\n      notes, \n      totalPrice,\n      status,\n      createdAt, \n      \"user\": user->_id,\n      items[]{\n          quantity,\n          itemTotal,\n          productId,\n          productName,\n          productSlug,\n          baseSku,\n          variantLabel,\n          variantSku,\n          \"category\": product->category->{title, slug},\n          \"variantId\": variant->_id,\n          color{\n            colorName,\n            colorCode,\n            \"firstImage\": images[0],\n            variantPrice,\n            stock,\n            specs\n          }\n      }\n    }\n    ": GET_QUOTATION_BY_IDResult;
    "\n  *[_type==\"quote\" && user->clerkId == $clerkId] | order(_createdAt desc){\n    _id, \n    name, \n    email,\n    phone,\n    address,\n    notes, \n    totalPrice,\n    status,\n    createdAt, \n    \"user\": user->_id,\n    items[]{\n        quantity,\n        itemTotal,\n        productId,\n        productName,\n        productSlug,\n        baseSku,\n        variantLabel,\n        variantSku,\n        \"category\": product->category->{title, slug},\n        \"variantId\": variant->_id,\n        color{\n          colorName,\n          colorCode,\n          \"firstImage\": images[0],\n          variantPrice,\n          stock,\n          specs\n        }\n      }\n  }\n      ": GET_QUOTATIONS_BY_CLERK_IDResult;
    "\n    *[_type == \"user\" && clerkId == $clerkId][0]{_id}\n    ": GET_SANITY_USER_BY_CLERK_IDResult;
  }
}
